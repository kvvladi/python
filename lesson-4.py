# 1 задание
# Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv
if len(argv) > 1:
    script_name, work_time, rate, bonus = argv
    work_time = int(work_time)
    rate = int(rate)
    bonus = int(bonus)
    print((work_time*rate )+bonus)
else:
    work_time = int(input('Введите выработку в часах: '))
    rate = int(input('Введите размер ставки в часах: '))
    bonus = int(input('Введите размер премии: '))
    print((work_time*rate )+bonus)


# 2 задание
# Представлен список чисел.
# Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.

list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [list[i] for i in range(len(list)) if list[i-1] < list[i]]
print('Изначальный список:' + str(list) )
print('Конечный список: ' + str(new_list))


# 3 задание
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Решите задание в одну строку.

my_list = [el for el in range(20,240) if el % 20 == 0 or el % 21 == 0 ]
print(my_list)

# 4 задание
# Представлен список чисел.
# Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.

list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in list if list.count(el)==1]
print(new_list)

# 5 задание
# Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.

from functools import reduce

my_list = [el for el in range(100,1000) if el % 2 == 0]
sum = reduce((lambda x, y: x * y), my_list)
print(sum)

# 6 задание Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Предусмотрите условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл.
# Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

from itertools import count, cycle

for el in count(13):
    if el > 133:
       break
    else:
      print(el)

list = [1,2,3,4,5,6]
count = 0
iter = cycle(list)
iteration = int(input("Добавьте итерацию: "))
while count < iteration:
    print(next(iter))
    count+=1
print(list, iteration)

# 7 задание
# Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа.
# В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.

from itertools import count
from math import factorial
def fact():
    for el in count(1):
        yield factorial(el)

obj = fact()
x = 0
for i in obj:
     if x < 13:
         print(i)
         x += 1
     else:
         break

